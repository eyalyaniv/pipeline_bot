var log4js = require("log4js")
  , cfg
  ;

module.exports = 
{ of: 
  function(s){
      return log4js.getLogger(s);
  }
, configure:
  function(cfg) { 
      log4js.clearAppenders();
      log4js.configure( cfg );
      if (cfg.levels && cfg.levels["[all]"])
          log4js.setGlobalLogLevel( cfg.levels["[all]"] );
  }
, toLevel: 
  function(s){ 
      return log4js.levels.toLevel(s)
  }
  /*
  returns a request-log middleware that intercepts requests and writes log entry 
  to the request log.
  @param {string} category
     the appender category to follow - will be prefixed with "req-".
  @param {?object} options
  @param {boolean} options.nolog
  @param {string} options.format
  @param {object} options.level

  */
, requestLog:
  function(category, options) { 
      if (!options) options = { level: "INFO" }
      if ('string' == typeof options.level) options.level = this.toLevel( options.level );
      return log4js.connectLogger(log4js.getLogger("req-" + category), options);
  }
  /* 
  a simple middleware factory to expose the log on app on the request and on the response 
  as well it is implemented as a funciton for future extensibility by providing arguments.
  */
, appLog:
  function(){ 
      return function(req,res,next){ 
          req.log = res.log = req.app.log;
          next() 
      }
  }
, quiet:
  function(){ 
      log4js.clearAppenders();
  }
}
