var log = require('osg-logger').of('cw:stats');


module.exports = function(config){
    var API =
        { add: add
        };

    var isDisable = !config.cloudWatch.enable
     , isStatsDisabled  = config.cloudWatch.stats !== true
     ;
    //disable sending concurrent stats if it is disable for all metrics
    config.cloudWatch.stats = (isDisable || isStatsDisabled) ? false : true;
    if(config.cloudWatch.stats === false){
        log.info('Send stats is disable from config');
        return API;
    }

    var timer    = config.cloudWatch.timer
      , model    = config.cloudWatch.model
      , counters = {}
      ;

    timer.register(function () {
        Object.keys(counters).map(function (type) {
            Object.keys(counters[type]).map(function (wid) {
                var key, value;
                key   = type + "Count" + wid;

                if(type == "users"){
                    value = statsProperties (type + "Count", wid, Object.keys(counters[type][wid].value).length);
                    counters[type][wid].value = {};
                }else {
                    value = statsProperties (type + "Count", wid, counters[type][wid].value);
                    counters[type][wid].value = 0;
                }
                model.push(key, value);
                counters[type][wid].called +=1;


                if(counters[type][wid].called == 60){
                    key   = type + "CountPerHour" + wid;



                    if(type == "users"){
                        value = statsProperties (type + "CountPerHour", wid, Object.keys(counters[type][wid].valuePerHour).length);
                        counters[type][wid].valuePerHour = {};
                    }else {
                        value = statsProperties (type + "CountPerHour", wid, counters[type][wid].valuePerHour);
                        counters[type][wid].valuePerHour = 0;
                    }
                    model.push(key, value);
                    counters[type][wid].called = 0;

                }
            });
        });
    });

    return API;

    function add(type, wid, userName){
        if(!config.cloudWatch.stats) return;//todo check if some property exist

        if(!type || !wid){
            return log.error("Can't add stats. Mandatory field is missing. type = %s, wid = %s", type, wid);
        }
        if(!counters[type] || !counters[type][wid]){
            addCountersMap(type, wid, userName)
        }
        if(type == "users" && userName){
            counters[type][wid].value[userName]        = 1;
            counters[type][wid].valuePerHour[userName] = 1;
        }else {
            counters[type][wid].value  += 1;
            counters[type][wid].valuePerHour += 1;
        }

        log.debug("Counters section was updated. type = %s, wid = %s, counters = %j", type, wid, counters[type][wid]);
    }

    function addCountersMap(type, wid, userName){
        if(!counters[type]) counters[type] = {};
        if(type == "users"){
            counters[type][wid] =
            { value : {}
            , valuePerHour: {}
            , called: 0
            };
            counters[type][wid].value[userName]        = 1;
            counters[type][wid].valuePerHour[userName] = 1;
        } else{
            counters[type][wid] =
            { value : 1
            , valuePerHour: 1
            , called: 0
            };
        }

        log.info("Counters section was added to the map. type = %s, wid = %s", type, wid);
    }
    function statsProperties(name, wid, cValue){
        var value =
            { name: name
            , type: 'stats'
            , host: config.cloudWatch.namespace
            , worldId: wid
            , count: cValue
            };
        return value;
    }
}

