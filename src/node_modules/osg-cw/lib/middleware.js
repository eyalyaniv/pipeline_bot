var log = require('osg-logger').of('cw:middleware')
    , responseTime = require('./responseTime')
    , onHeaders = require('on-headers')
    ;


module.exports = function middleware(config) {
    // first called by lib/index
    var RT, timer, model,
        isDisable = !config.cloudWatch.enable
        ;

    if(isDisable){
        log.info('Send request metrics is disable from config');
    }else {
        timer = config.cloudWatch.timer;
        model = config.cloudWatch.model;
        RT = responseTime({ timer: timer, model: model });
    }

    return function (overrides) {
        // called when added to route
        // TODO: add support for dims objectper route
        // TODO: add support for dims resolve function to be called on each request
        return handler;
    };
    function handler(req, res, next) {
        if(isDisable){
            return next();
        }
        // called on each route
        var route = req.route ? req.route.path : req.path;
        var host = req.headers.host;
        var rt = RT.start(route, host);
        onHeaders(res, function () {
            rt.end();
        });
        next();
    }
}