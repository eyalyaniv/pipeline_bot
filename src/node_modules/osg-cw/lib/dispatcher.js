var log = require('osg-logger').of('cw:dispatcher')
    , AWS = require('aws-sdk')
    , async = require('async')
    ;

module.exports = function (config) {
    var instanceId, instanceType;

    if(config.cloudWatch.enable){
        var MS = new AWS.MetadataService();
        MS.request('/latest/meta-data/instance-id', function (err, data) {
            if (err) return log.error("unable to extrct AWS instance-id");
            instanceId = data;
            log.info('AWS instance id:', data);
        });
        MS.request('/latest/meta-data/instance-type', function (err, data) {
            if (err) return log.error("unable to extrct AWS instance-type");
            instanceType = data;
            log.info('AWS instance type:', data);
        });
    }

    var cloudwatch = new AWS.CloudWatch(config.cloudWatch);

    var metricFormatStrategy = {
        "requestCount": function (sample) {
            return {
                MetricName: 'request_count',
                Dimensions: formatDims({
                    Host: sample.host || '-',
                    Route: sample.route || '-',
                    InstanceId: instanceId || '-',
                    InstanceType: instanceType || '-'
                }),
                Timestamp: new Date(),
                Unit: 'Count',
                Value: sample.count
            };
        },
        "responseCount": function (sample) {
            return {
                MetricName: 'response_count',
                Dimensions: formatDims({
                    Host: sample.host || '-',
                    Route: sample.route || '-',
                    InstanceId: instanceId || '-',
                    InstanceType: instanceType || '-'
                }),
                Timestamp: new Date(),
                Unit: 'Count',
                Value: sample.count
            };
        },
        "requestPerSec": function (sample) {
            return {
                MetricName: 'request_per_sec',
                Dimensions: formatDims({
                    Host: sample.host || '-',
                    Route: sample.route || '-',
                    InstanceId: instanceId || '-',
                    InstanceType: instanceType || '-'
                }),
                StatisticValues: {
                    Maximum: sample.max || 0,
                    Minimum: sample.min || 0,
                    SampleCount: sample.count || 0,
                    Sum: sample.sum || 0
                },
                Unit: 'Count/Second',
                Timestamp: new Date()
            };
        },
        "responseTime": function (sample) {
            return {
                MetricName: 'response_time',
                Dimensions: formatDims({
                    Host: sample.host || '-',
                    Route: sample.route || '-',
                    InstanceId: instanceId || '-',
                    InstanceType: instanceType || '-'
                }),
                StatisticValues: {
                    Maximum: sample.max || 0,
                    Minimum: sample.min || 0,
                    SampleCount: sample.count || 0,
                    Sum: sample.sum || 0
                },
                Unit: 'Milliseconds',
                Timestamp: new Date()
            };
        },
        "concurrentCount": function (sample) {
            var dim;

            if(sample.instanceData === false){
                dim = formatDims({
                    Host: sample.host || '-',
                    WorldId: sample.worldId || '-'
                })
            } else {
                dim = formatDims({
                    Host: sample.host || '-',
                    WorldId: sample.worldId || '-',
                    InstanceId: instanceId || '-',
                    InstanceType: instanceType || '-'
                })
            }

            return {
                MetricName: 'concurrent_count',
                Dimensions: dim,
                Timestamp: new Date(),
                Unit: 'Count',
                Value: sample.count
            };
        },
        "sequenceCount": function (sample) {
            var dim;

            if(sample.instanceData === false){
                dim = formatDims({
                    Host: sample.host || '-',
                    Environment: sample.env
                })
            } else {
                dim = formatDims({
                    Host: sample.host || '-',
                    InstanceId: instanceId || '-',
                    InstanceType: instanceType || '-',
                    Environment: sample.env
                })
            }

            return {
                MetricName: 'sequence_count',
                Dimensions: dim,
                Timestamp: new Date(),
                Unit: 'Count',
                Value: sample.count
            };
        },
        "stats": function (sample) {
            return {
                MetricName: sample.name || '-',
                Dimensions: formatDims({
                    Host: sample.host || '-',
                    WorldId: sample.worldId || '-',
                    InstanceId: instanceId || '-',
                    InstanceType: instanceType || '-'
                }),
                Timestamp: new Date(),
                Unit: 'Count',
                Value: sample.count
            };
        }
    };

    function createMetric(samples) {
        var metrics = []
            , metric, sample
            ;
        Object.keys(samples).map(function (type) {
            sample = samples[type];
            if (!sample.type) return log.error('sample is missing "type" property', sample);
            metric = metricFormatStrategy[sample.type](sample);
            log.debug(metric);
            metrics.push(metric);
        });
        if (metrics.length >= 1)
            sendMetricsToCloudWatch(metrics);
    }

    function formatDims(dims) {
        var dimsArr = [];
        Object.keys(dims).map(function (prop) {
            dimsArr.push({ Name: prop, Value: dims[prop].toString() });  // all dims Names and Values must be strings 
        });
        return dimsArr;
    }

    function sendMetricsToCloudWatch(metrics) {
        var sendMetrics  = metrics.splice(0,20),
            sendData =
            { MetricData: sendMetrics,
              Namespace: config.cloudWatch.namespace
            };

        cloudwatch.putMetricData(sendData, function (err, data) {
            if (err){
                log.error(err, err.stack); // an error occurred
            }else {
                log.info("%s metrics was successfully sent", sendMetrics.length, data);
                if(metrics.length){
                    sendMetricsToCloudWatch(metrics);
                }
            }
        });
    }
    
    function fetch() {
        var samples = config.cloudWatch.model.all();
        config.cloudWatch.model.clear();
        createMetric(samples);
    }
    
    return {
        fetch: fetch
    }
}


//log.debug('module loaded')