var log = require('osg-logger').of('cw:sequence')
    , async = require('async')
    ;

module.exports = function sequence(config) {
    //disabled only if flag is exist and value is false))))
    var isDisable = !config.cloudWatch.enable
        , isSequenceDisabled  = config.cloudWatch.sequence !== true
        ;
    //disable sending concurrent stats if it is disable for all metrics
    config.cloudWatch.sequence = (isDisable || isSequenceDisabled) ? false : true;
    if(config.cloudWatch.sequence === false){
        log.info('Send sequence counter is disable from config');
    }

    var timer = config.cloudWatch.timer,
        appEnv = config.app.env.toLowerCase(),
        model = config.cloudWatch.model,
        sequenceValue = 0,
        sequenceOptions = {
            instanceData: true
        }
        ;

    if (!config.cloudWatch.sequence === false) {
        timer.register(function () {

            model.push('sequenceCount',
                {
                    type : 'sequenceCount',
                    host: config.cloudWatch.namespace,
                    count: sequenceValue,
                    instanceData: sequenceOptions.instanceData || false,
                    env: appEnv
                }
            )

        })
    }

    return {
        set : setSequence
    };

    function setSequence(value, options, callback) {
        if (config.cloudWatch.sequence === false) return suppressResult(callback, true, 'sequence disabled');

        if(typeof value == "object"){
            sequenceValue = value.value;//backward compatibility
        } else {
            sequenceValue = value;
            sequenceOptions = options;
        }


        if(!sequenceValue ) {
            return suppressResult(callback, true, 'missing field');
        }

        return suppressResult(callback, true);
    }

    function suppressResult(callback, call, err) {
        if (typeof callback === 'function') return call ? callback(err) : callback;
        else return function () { }
    }
};
